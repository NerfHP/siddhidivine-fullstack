generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  email             String?   @unique // Made optional since not required for auth
  name              String? // Made optional, filled during registration
  password          String? // Keep for backward compatibility but not used
  phone             String    @unique // PRIMARY authentication field
  alternativePhone  String? // Optional alternative phone
  address           String? // User address
  isProfileComplete Boolean   @default(false) // Track registration completion
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  tokens            Token[]
  reviews           Review[]
  orders            Order[]
  role              String    @default("user")
}

model Token {
  id          String   @id @default(cuid())
  token       String   @unique
  type        String
  expires     DateTime
  blacklisted Boolean  @default(false)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
}

model Category {
  id          String        @id @default(cuid())
  name        String
  slug        String        @unique
  description String?
  type        String
  image       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  parentId    String?
  parent      Category?     @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  children    Category[]    @relation("ParentChild")
  items       ContentItem[]
}

model ContentItem {
  id              String       @id @default(cuid())
  name            String
  slug            String       @unique
  description     String
  content         String?
  price           Float?
  salePrice       Float?
  images          String
  type            String
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  categories      Category[]
  vendor          String?
  sku             String?
  availability    String?
  attributes      String?
  specifications  String?
  benefits        String?
  variants        String?
  howToUse        String?
  packageContents String?
  reviews         Review[]
  orderItems      OrderItem[]
  stock           Int          @default(0)
  isPublished     Boolean      @default(true)
  faqs            ProductFaq[] // Add this line to create the relation
}

model FormSubmission {
  id        String   @id @default(cuid())
  type      String
  data      String
  createdAt DateTime @default(now())
}

// Add this to your existing schema.prisma - only the Review model changes

model Review {
  id         String      @id @default(cuid())
  rating     Int
  comment    String?
  imageUrl   String?
  isApproved Boolean     @default(true) // Auto-approve for registered users
  createdAt  DateTime    @default(now())
  // Product relation (required)
  productId  String
  product    ContentItem @relation(fields: [productId], references: [id], onDelete: Cascade)
  // User relation (optional - for registered users)
  userId     String?
  user       User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  // Guest user fields (for anonymous reviews)
  guestName  String?
  guestEmail String?
  // Admin approval tracking
  approvedAt DateTime?
  approvedBy String? // Admin user ID who approved

  @@index([productId])
  @@index([userId])
  @@index([isApproved])
  @@index([guestEmail])
}

model Discount {
  id           String    @id @default(cuid())
  code         String    @unique
  discountType String
  value        Float
  expiresAt    DateTime?
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
}

model Order {
  id              String      @id @default(cuid())
  userId          String?
  user            User?       @relation(fields: [userId], references: [id])
  total           Float
  status          String      @default("PENDING")
  customerName    String
  customerPhone   String
  shippingAddress String
  items           OrderItem[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model OrderItem {
  id        String      @id @default(cuid())
  quantity  Int
  price     Float
  orderId   String
  order     Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   ContentItem @relation(fields: [productId], references: [id])
}

// --- ADD THIS NEW MODEL ---
model ProductFaq {
  id          String      @id @default(cuid())
  question    String
  answer      String
  productId   String
  product     ContentItem @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([productId])
}
